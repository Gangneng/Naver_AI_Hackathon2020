{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = ['co','dil','ity','o']\n",
    "a = list('co')\n",
    "b = list('dil')\n",
    "c = list('ity')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 집합의 모든 부분 집합 생성해주는 함수\n",
    "def get_subset(string_list):\n",
    "    \n",
    "    power_set = [[]]\n",
    "    \n",
    "    for s in string_list:\n",
    "        for sub_set in power_set:\n",
    "            power_set = power_set + [list(sub_set) + [s]]\n",
    "            \n",
    "    # 부분집합 길이가 2 이상인 것만 남기고 제거\n",
    "    power_set = [x for x in power_set[1:] if len(x) >= 2]\n",
    "    \n",
    "    return power_set\n",
    "\n",
    "# 문자열 내부에 중복 문자 있는 지 체크해주는 함수\n",
    "def check_overlapping(string_list):\n",
    "    \n",
    "    concat_string = \"\".join(string_list)\n",
    "    char_list = list(concat_string)\n",
    "    \n",
    "    if len(char_list)!=len(set(char_list)):\n",
    "        return True # 중복\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "\n",
    "def solution(A):\n",
    "    \n",
    "    string_list = []\n",
    "    answer = 0\n",
    "\n",
    "    # 중복 문자가 없는 부분 집합 추출\n",
    "    for a in get_subset(A):\n",
    "        if check_overlapping(a) == False:\n",
    "            string_list.append(\"\".join(a))\n",
    "\n",
    "    max_len = 0\n",
    "    # calculate the largest string\n",
    "    for concat_s in string_list:\n",
    "        if len(concat_s) > max_len:\n",
    "             max_len = len(concat_s)\n",
    "\n",
    "    return max_len\n",
    "    \n",
    "solution(['co','dil','ity'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
